<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.rayleigh</groupId>
	<artifactId>batman</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>batman</name>
	<description>batman for codeGenerator</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<springfox.version>2.2.2</springfox.version>
		<fastjson.version>1.2.33</fastjson.version>
		<springloaded.version>1.2.6.RELEASE</springloaded.version>
		<org.mapstruct.version>1.1.0.Final</org.mapstruct.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>com.rayleigh</groupId>
			<artifactId>core</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<!--<dependency>-->
			<!--<groupId>org.springframework.boot</groupId>-->
			<!--<artifactId>spring-boot-starter-aop</artifactId>-->
		<!--</dependency>-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!--模板配置-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!--排除tomcat 使用undertow-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-tomcat</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>


		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!--swaggerUI支持-->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>${springfox.version}</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>${springfox.version}</version>
		</dependency>

		<!--fastJson-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>

		<!--thymeleaf解析太严格，你结束符，这个框架可以帮助完善结束符-->
		<dependency>
			<groupId>net.sourceforge.nekohtml</groupId>
			<artifactId>nekohtml</artifactId>
			<version>1.9.22</version>
		</dependency>

		<!--devtools热部署-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional> <!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入  -->
		</dependency>

		<!--mapstruct支持-->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId> <!-- use mapstruct-jdk8 for Java 8 or higher -->
			<version>${org.mapstruct.version}</version>
		</dependency>

		<!--打印hibernate有参数日志-->
		<dependency>
			<groupId>p6spy</groupId>
			<artifactId>p6spy</artifactId>
			<version>3.0.0</version>
		</dependency>

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.29</version>
		</dependency>


		<!--解决jackson解析json结果时加载已设置为懒加载的数据问题-->
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-hibernate5</artifactId>
			<version>2.9.0.pr4</version>
		</dependency>

		<!--为了使用ant的文件压缩-->
		<dependency>
			<groupId>ant</groupId>
			<artifactId>ant</artifactId>
			<version>1.6.5</version>
		</dependency>
	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>3.0.4</version>
				</plugin>
			</plugins>
		</pluginManagement>



		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<finalName>${project.artifactId}-boot</finalName>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<version>2.8.2</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>findbugs-maven-plugin</artifactId>
				<configuration>
					<effort>default</effort>
					<failOnError>false</failOnError>
					<!--
					<excludeFilterFile>findbugs-exclude.xml</excludeFilterFile>
					<includeFilterFile>findbugs-include.xml</includeFilterFile>-->
					<!--跳过的类型-->
					<omitVisitors>FindDeadLocalStores,UnreadFields</omitVisitors>
					<!--第三方jar检测-->
					<!--<pluginList>myDetectors.jar, yourDetectors.jar</pluginList>-->

				</configuration>
				<executions>
					<execution>
						<id>check</id>
						<phase>compile</phase>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!--mapstruct支持-->
			<!--<plugin>-->
				<!--<groupId>org.apache.maven.plugins</groupId>-->
				<!--<artifactId>maven-compiler-plugin</artifactId>-->
				<!--<version>3.5.1</version>-->
				<!--<configuration>-->
					<!--<source>1.8</source> &lt;!&ndash; or higher, depending on your project &ndash;&gt;-->
					<!--<target>1.8</target> &lt;!&ndash; or higher, depending on your project &ndash;&gt;-->
					<!--<annotationProcessorPaths>-->
						<!--<path>-->
							<!--<groupId>org.mapstruct</groupId>-->
							<!--<artifactId>mapstruct-processor</artifactId>-->
							<!--<version>${org.mapstruct.version}</version>-->
						<!--</path>-->
					<!--</annotationProcessorPaths>-->
				<!--</configuration>-->
			<!--</plugin>-->
			<!--<plugin>-->
				<!--<groupId>com.github.wvengen</groupId>-->
				<!--<artifactId>proguard-maven-plugin</artifactId>-->
				<!--<version>2.0.11</version>-->
				<!--<executions>-->
					<!--<execution>-->
						<!--&lt;!&ndash; 混淆时刻，这里是打包的时候混淆&ndash;&gt;-->
						<!--<phase>package</phase>-->
						<!--<goals>-->
							<!--&lt;!&ndash; 使用插件的什么功能，当然是混淆&ndash;&gt;-->
							<!--<goal>proguard</goal>-->
						<!--</goals>-->
					<!--</execution>-->
				<!--</executions>-->
				<!--<configuration>-->
					<!--&lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;-->
					<!--<attach>true</attach>-->
					<!--&lt;!&ndash; 是否混淆&ndash;&gt;-->
					<!--<obfuscate>true</obfuscate>-->
					<!--&lt;!&ndash; 指定生成文件分类 &ndash;&gt;-->
					<!--<attachArtifactClassifier>pg</attachArtifactClassifier>-->
					<!--<options>-->
						<!--&lt;!&ndash; JDK目标版本1.7&ndash;&gt;-->
						<!--<option>-target 1.8</option>-->
						<!--&lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
						<!--<option>-dontshrink</option>-->
						<!--&lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;-->
						<!--<option>-dontoptimize</option>-->
						<!--&lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;-->
						<!--<option>-dontskipnonpubliclibraryclasses</option>-->
						<!--<option>-dontskipnonpubliclibraryclassmembers</option>-->
						<!--&lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;-->
						<!--<option>-allowaccessmodification</option>-->
						<!--&lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆&ndash;&gt;-->
						<!--&lt;!&ndash;<option>-useuniqueclassmembernames</option>&ndash;&gt;-->
						<!--&lt;!&ndash; 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名&ndash;&gt;-->
						<!--<option>-keeppackagenames</option>-->
						<!--&lt;!&ndash; 不混淆所有特殊的类&ndash;&gt;-->
						<!--<option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>-->
						<!--&lt;!&ndash; 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射&ndash;&gt;-->
						<!--<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>-->

						<!--&lt;!&ndash; 不混淆job包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.job.** { &lt;methods&gt;; }</option>-->
						<!--&lt;!&ndash; 不混淆filter包下的所有类名，这里主要是对Shiro的路踢人过滤器混淆，对类的属性和方法进行了混淆&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.filter.** </option>-->
						<!--&lt;!&ndash; 不混淆凭证包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.credntials.** </option>-->
						<!--&lt;!&ndash; 混淆目的同上，这个是拦截器的包，包中有防止重复提交的拦截器&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.interceptor.** </option>-->
						<!--&lt;!&ndash; 混淆目的同上，这个是域包，包中有用户登录域&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.realm.** </option>-->
						<!--&lt;!&ndash; 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别&ndash;&gt;-->
						<!--<option>-keep class com.rayleigh.batman.model.** {*;}</option>-->
						<!--<option>-keep class com.rayleigh.batman.repository.** {*;}</option>-->
						<!--&lt;!&ndash; 以下两个包因为大部分是Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆&ndash;&gt;-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.service.** </option>-->
						<!--<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.dao.**</option>-->
					<!--</options>-->
					<!--<outjar>${project.build.finalName}-pg.jar</outjar>-->
					<!--&lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;-->
					<!--<libs>-->
						<!--<lib>${java.home}/lib/rt.jar</lib>-->
					<!--</libs>-->
					<!--&lt;!&ndash; 加载文件的过滤器，就是你的工程目录了&ndash;&gt;-->
					<!--<inFilter>com/rayleigh/batman/**</inFilter>-->
					<!--&lt;!&ndash; 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;-->
					<!--<injar>classes</injar>-->
					<!--&lt;!&ndash; 输出目录&ndash;&gt;-->
					<!--<outputDirectory>${project.build.directory}</outputDirectory>-->
				<!--</configuration>-->
			<!--</plugin>-->
		</plugins>
	</build>


</project>
